import json
import base64

import readline
import subprocess
import sys
import os
import string
import pickle


# mapfile = open(sys.argv[1] + '.map', 'r')
# mapstr = mapfile.read()

# oramlist = ['5','6','7','0','4']
oramlist = ['0','4','5','6','7','8']
# filelist = ['1G_enron_128.vbwt', '1G_enron_256.vbwt', '1G_enron_512.vbwt', '1G_enron_1024.vbwt','1G_enron_2048.vbwt', '1G_enron_4096.vbwt']
# filelist = ['4G_human_256.vbwt', '4G_human_512.vbwt', '4G_human_1024.vbwt', '4G_human_2048.vbwt', '4G_human_4096.vbwt', '4G_human_8192.vbwt', '4G_human_16384.vbwt']
filelist =['4G_human_128.vbwt']
cisze = {   
    '0':'5',
    '4':'6',
    '5':'6',
    '6':'32',
    '7':'5',
    '8':'32'}
tnum_piccoli = {   
    '0':'1',
    '4':'4',
    '5':'8',
    '6':'32',
    '7':'5',
    '8':'32'}
tnum_grandi = {   
    '0':'1',
    '4':'5',
    '5':'16',
    '6':'7',
    '7':'5',
    '8':'5'}
# cisze = {   
#     '0':'7',
#     '4':'8',
#     '5':'8',
#     '6':'9',
#     '7':'7',
#     '8':'7'}
   
# querylist= ['inaccurate or corrupt data, transcription errors, a copyright or']
# querylist = ["Fitch","business€trip","investment€portfolio"]#"Thank you very much"] € is used as a word separator	
querylist = ["ATAATAGGAAGCCTGTCTGGAGAATTAGCAACCAGCAGCATGAAACTGTTCTCAAAAGATGTTCACTCAATTTACATGATGTATTTCTATTGTACAATAGGTTCTACGAAGCACATACACTTATCAAGTTATTTTCTTTCCTATCACACTTTATGTCACATCTTAAATACTTTACCTCATGGATAAAATATATTGGGTTTTGTTTTTCTTTGGGTTTTTAGAGCATTTTGTTCTATAAGAGTCAACATTCTTAACTGCTGAAATATCATTTATCGAAAGCAGGTGAGGTCTACCCATGCTGGATATATTTTCTTCTACTGTATCTGTCTTTTGGCCAAGACTCCTACAAACACACTAGACGGCATTACCTCCTAGTTACACTTGGCCAAAGCCTTCCCCAGGCCTCATTACTGGAAAGGAAGCACATTTAAAGGCGGGTAGGTTTAGACACCCATGGCATTAGCGGCATTGCTGACAGAGGGGCATGGAGGTGTGCCTAAGTTCAGGTTCCCCAAGATTCAAGGTGCAAGGATCCTGTTAGGGAAAACACCTGTGTGAAAGAAAAAAAGAAAGTGGTGGTGATGTTGGGGGAGTCGAGGAACCGGGGAGATATGTCAGACCAATGCAAATCTGACCCAGAGTAAAGGAGAGAGGGAGAGAAAATGAGGTGAAAGTGTCCTGGACTGCCAGGCAGTCTAAAGCCATTGGGAAGTGCTTGAGCCAAAGTAAGCCAATAAAGGAGACACCTGTCTCCCAGGGCTGGGTCTACCTCAGTATCCCTGCTGTGGCTTATCGCTGGGCAGGAGCAGACTGTGGAAAGCATGGCCTCAATGCAGAAGTGGCTGTCAATTCCTGAGTGCAGTGGCTGGGACCCTGTCAACTGCTCTTTCTGTAGAAGGAGGTCTGCGAGGCCCCTTCTCTGGCTGCCACAAGGTGAGAATTATACCTAAAGGAGGAGCTGTTAATCAGAGGTCAGGATACACTCTGCAGCCCCTTTCAAGGTGTAGGACATGTCCCTAGCCCAAGGGGCTCTCAGGAGACCCTGATGGCCCTCTGCCCTCCTCCCACTCTCAAATACTCTTTCAGTTCAAACATCTTAGAGTCCACACTAGAGCTTACTTGACCTTAGGATGGTTGGCTCTACTGAATGGAAGTGCCCTTGGGTGAAGGAACAAATTAAACTTTTCTGTCAGTTAGTCCTCAAGGTTAAATAAGCATCTGAATCATGTCCTGATCCCAAGGAAGAGGAGAACAAAAAACCTTGGCATGGGAACCAGAGGAGAGAGATGGGGCACAATGCTCCCTACTCGGTCATTTTACCCAAGGTCAATCTTGCCTCTGATAAACCTCATGTAGCCAGTTGTGCTTGGTGAGCCCCATACTGGCATGGGGCTCAGGTTGCCAGTGAGTGGCAGGCCTCTTGGAGGAGGTCTGAGAGAGGATGTAGAGGCTGGTTGTTTCCTTCCCTTTCTGAAATCCTATAAGCCCTTGTCCCCCACAGCTTTTCAGGCCTGAAAGTGAAGGTTGATTTAGCTGGCAGAAGTATAGATGAAGCCCAGGAAGCTTAGAGCCCTGAGGAAGGGAAAGGAAACTGGCATGGACTGGACATCTACTCTGCAACACAATCTCCATATGTATTTATTCATTTGACATGCAGAGCCTGTGCAGTGCTATTATTATCCCTATTTTTCAGTGAGGCCACTGAATCTCAAAGAGGTTCACTCAAGACCATGCGTGCCAAAGCCAGGGTGCAAATATGGGCCAGTCTGAGTCCAAAGCCTCTGCTGCCATCCCAAACCTAGGCCCCAGGTGTTAGGGAGGCCTTTGAAAGTTAGGAGATCCTGTCCCACTGGACAGGGAGGCCAGGAGTGAAGCTGGGGAGCTCACATGGAAAAGCAGGTCTTCCTGTCTCAGGCAGCCCACAGGAATGGTAGTGCTTGGGCTAGGTGGGTTACCTATACATACTTGTTGAACAAGGAAGAAAGAGAGGGCCAGAGGATCCACAGTTTCCTTAAACTTCTTTGGAGCTCTCTGAACCCCCTACATTCTGCTCTGTTACTATTTTGGGGCTCATCTCATCTCCTTTTCTCGTCTCCTAGAAGGAAAGACTCACGTTTGAATCATCTTTGTATCCCATAGTGCCTGGCATGTAATAGGTGCTCAGTAGATGTCTGTTGGATGAATAGACTAGTCTAGACTTTGAGGTGAGCCAGAATGGCAGGTCACATGAGGATGGGGAGGAGAGGCTGGGGTCAAGCATTTTGCCCCACATTCACGGGGCCCACTTCTTGCCCAGGCTTTCCTTGTGAGCCACAGGGATGTCATCTGGGAAGTACAGATACACTTTCTGCAACTGCTCTGAGGGCTTTCCATCAGTTTTTATACAAGTGCTTGAGCAGATCACAAGGTTCCATCAGGACTGGAACTCAAAGCAGGAATCATTTCTAGAGGTTCATTTAGCCTGGGCCTTCCTGCTGTCAAGAGCCCTACATCACCAAGTGGGAGCTGCATCTCAGGTCCTGGACCTGTCTCATGTCATATGTGCCTGATGGCCTGGTGCTGTCAGTGAAAAAGCATCAGTGAGGCAAAACTTGTCTCTGGAGGCCCCTGGATGTCTGTCCTGTGTGACTTCTACCCTCCTCACTTCCCCACACACATTCAGATACATACCCCCCCCTCCCTAGGCTCAGCTCAGGGCCTCCTACTTGCCTTCCTACCTTACTCCGATTTTGGCAATGCTAGCACACACCTACCCAGCTCCGAGCAATTCTCAAACTCTCCCTGGAGGAACCAGTTGTCTAAATCCAGCAATCGACCAGCTCCCCTTGCTAAAGGGAAGATGGCTCGAGCGTGCTCTGAGGTGTGATAGAAAAGTCACAGGGTTTGGCATCAGATCCAGGTAACATAGCTCTGCCTGAGGATTTATTTTAATGTGCTGCTGCCTTGGTCTCCTAAGGCACAGTACTGAGGCAAGAAAGTTTATGATGCATTGGAGGAACAGAAGGAATATCATGAATAGAGCAGAAAGAGCTAGGCAGGGAGTGGAACCA"]

# querylist= ['water', 'five-and-twenty', 'inaccurate or corrupt data, transcription errors, a copyright or']

# if mapstr != None:
#     mapper = lambda x: mapstr.find(x).to_bytes(1, byteorder='little', signed=True)
# else:
#     print('Cannot query the server: no character map defined')

# temp = list()	
# for i in querylist:
#     temp.append(b''.join(list(map(mapper, i))))
for j in filelist:
    mapfile = open(j + '.map', 'r')
    mapstr = mapfile.read()
    if mapstr != None:
        mapper = lambda x: mapstr.find(x).to_bytes(1, byteorder='little', signed=True)
    else:
        print('Cannot query the server: no character map defined')

    temp = list()	
    for i in querylist:
        temp.append(b''.join(list(map(mapper, i))))
    
    for i in oramlist:
        subprocess.call(['./main', j, i, cisze[i], '32'] + temp )

    # for i in oramlist:
    #     subprocess.call(['./main', sys.argv[1], i, cisze[i], '32'] + temp )
